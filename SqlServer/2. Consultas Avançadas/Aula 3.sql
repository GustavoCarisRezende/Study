SELECT N.MATRICULA, V.NOME, COUNT(*) AS [Numero de Notas]
FROM TABELA_DE_VENDEDORES V
INNER JOIN NOTAS_FISCAIS N ON N.MATRICULA = V.MATRICULA
GROUP BY N.MATRICULA, V.NOME
ORDER BY [Numero de Notas] DESC


/* DESAFIO */
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(QUANTIDADE) AS QUANTIDADE
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP ON TP.CODIGO_DO_PRODUTO = INF.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
HAVING SUM(QUANTIDADE) > 394000 
ORDER BY SUM(QUANTIDADE) DESC;
/***********/


SELECT DISTINCT TC.CPF AS [CPF do cadastro],
       TC.NOME AS [Nome do Cliente],
       NF.CPF AS [Cpf da nota]
FROM TABELA_DE_CLIENTES TC
INNER JOIN NOTAS_FISCAIS NF ON NF.CPF = TC.CPF

-- Cadastrando um novo cliente para demonstração do left join
INSERT INTO TABELA_DE_CLIENTES(
    CPF, NOME, ENDERECO_1, ENDERECO_2, BAIRRO, CIDADE, ESTADO,
    CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO,
    VOLUME_DE_COMPRA, PRIMEIRA_COMPRA
) VALUES ('23412632331', 'Juliana Silva', 'Rua Tramandai', '',
          'Bangu', 'Rio de Janeiro', 'RJ', '2340000', '1989-02-04',
          33, 'F', 180000, 24500, 0)

-- Clientes que não tem nenhuma compra
SELECT DISTINCT TC.CPF AS [CPF do cadastro],
       TC.NOME AS [Nome do Cliente],
       NF.CPF AS [Cpf da nota]
FROM TABELA_DE_CLIENTES TC
LEFT JOIN NOTAS_FISCAIS NF ON NF.CPF = TC.CPF
WHERE NF.CPF IS NULL


SELECT TV.NOME AS [Nome Vendedor],
       TV.BAIRRO AS [Bairro]
FROM TABELA_DE_CLIENTES TC
INNER JOIN TABELA_DE_VENDEDORES TV ON TV.BAIRRO = TC.BAIRRO
ORDER BY [Nome Vendedor]

SELECT TC.NOME AS [Nome Cliente],
       TV.NOME AS [Nome Vendedor],
       TV.BAIRRO AS [Bairro]
FROM TABELA_DE_CLIENTES TC
RIGHT JOIN TABELA_DE_VENDEDORES TV ON TV.BAIRRO = TC.BAIRRO
WHERE TC.CPF IS NULL
ORDER BY [Nome Vendedor]


SELECT TC.NOME AS [Nome Cliente],
       TC.BAIRRO AS [Bairro]
FROM TABELA_DE_CLIENTES TC
LEFT JOIN TABELA_DE_VENDEDORES TV ON TV.BAIRRO = TC.BAIRRO
WHERE TV.MATRICULA IS NULL
ORDER BY [Nome Cliente]

-- Junta os dois resultados do RIGHT e do LEFT join
SELECT TV.NOME AS [Nome Vendedor],
       TC.NOME AS [Nome Cliente],
       COALESCE(TV.BAIRRO, TC.BAIRRO) AS [Bairro]
FROM TABELA_DE_CLIENTES TC
FULL JOIN TABELA_DE_VENDEDORES TV ON TV.BAIRRO = TC.BAIRRO
ORDER BY [Nome Vendedor]


/* O UNION aplica um DISTINCT na consulta, e não traz linhas repetidas
   para trazer as linhas repetidas deve ser usado o UNION ALL */
SELECT DISTINCT BAIRRO
FROM TABELA_DE_CLIENTES
UNION
SELECT DISTINCT BAIRRO
FROM TABELA_DE_VENDEDORES

SELECT DISTINCT BAIRRO
FROM TABELA_DE_CLIENTES
UNION ALL
SELECT DISTINCT BAIRRO
FROM TABELA_DE_VENDEDORES


SELECT *
FROM TABELA_DE_CLIENTES
WHERE IDADE IN (18, 22)

SELECT *
FROM TABELA_DE_CLIENTES
WHERE CPF IN (SELECT CPF FROM NOTAS_FISCAIS WHERE DATA_VENDA >= '2019-01-01')

SELECT SUBQUERY.*
FROM (SELECT DISTINCT BAIRRO
      FROM TABELA_DE_CLIENTES
      UNION
      SELECT DISTINCT BAIRRO
      FROM TABELA_DE_VENDEDORES) AS SUBQUERY
ORDER BY SUBQUERY.BAIRRO

SELECT TC.NOME, TC.BAIRRO
FROM TABELA_DE_CLIENTES TC
WHERE TC.BAIRRO IN (SELECT DISTINCT TV.BAIRRO FROM TABELA_DE_VENDEDORES TV)


/* DESAFIO */
SELECT DISTINCT SABOR
FROM TABELA_DE_PRODUTOS
WHERE CODIGO_DO_PRODUTO IN (
    SELECT INF.CODIGO_DO_PRODUTO
    FROM ITENS_NOTAS_FISCAIS  INF
    INNER JOIN TABELA_DE_PRODUTOS TP ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
    GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO 
    HAVING SUM(INF.QUANTIDADE) > 394000)
/***********/


-- Iguais
SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS [Media Preco]
FROM TABELA_DE_PRODUTOS
GROUP BY EMBALAGEM
HAVING AVG(PRECO_DE_LISTA) <= 10

SELECT SUBQUERY.EMBALAGEM, SUBQUERY.[Media Preco]
FROM (SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS [Media Preco]
      FROM TABELA_DE_PRODUTOS
      GROUP BY EMBALAGEM) SUBQUERY
WHERE SUBQUERY.[Media Preco] <= 10

/*
CREATE VIEW vwMediaEmbalagens AS
    SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS [Media Preco]
    FROM TABELA_DE_PRODUTOS
    GROUP BY EMBALAGEM
*/

SELECT *
FROM vwMediaEmbalagens
WHERE [Media Preco] <= 10
